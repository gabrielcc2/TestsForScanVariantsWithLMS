#include <fcntl.h>
#include <errno.h>
#include <err.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
void Scan(float*);
int main(int argc, char *argv[])
{
  if (argc < 5) {
    printf("Missing arguments. Usage: filename numberOfTuples compareValue numThreads\n");
    return 0;
  }
  printf("Usage: filename numberOfTuples compareValue numThreads\n");
  FILE *ptr_file;
  char buf[1000];
  int numTuples=atoi(argv[2]);
  float compareValue=atof(argv[3]);
  int numThreads=atoi(argv[4]);
  int numReadTuples=0;
  ptr_file =fopen(argv[1],"r");
  if (!ptr_file){
    printf("Error. Could not open the input file.\n");
    return 0;
  }
  if (numTuples<=0){
    printf("Error. Please pass a valid number of tuples.\n");
    return 0;
  }
  if (numThreads<=0){
    printf("Error. Please pass a valid number of threads.\n");
    return 0;
  }
  float *array;
  array=(float*)malloc(((2*numTuples)+3+(2*numThreads))*sizeof(float));
  array[0]=compareValue;
  array[1]=(float)numTuples;
  array[2]=(float)numThreads;
  for (int i=0; i<(2*numThreads); i++){
    array[3+i]=(float)0;
  }
  while (fgets(buf,1000, ptr_file)!=NULL && numReadTuples<numTuples){
    array[numReadTuples+3+(2*numThreads)]=atof(buf);
    numReadTuples++;
  }
  fclose(ptr_file);
  if (numReadTuples<numTuples){
    printf("Error, file contains less tuples than specified.\n");
    return 0;
  }
  Scan(array);
  return 1;
}
/*****************************************
Emitting C Generated Code
*******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
void Scan(float*  x0) {
  float x5 = x0[2];
  float x3 = x0[1];
  int32_t x12 = x3 / x5;
  float x2 = x0[0];
  int32_t x9 = 2 * x5;
  int32_t x10 = -3 - x9;
  int32_t x11 = -1 * x10;
  bool x31 = x5 > 0;
  int32_t x63 = 3 + x3;
  int32_t x64 = x63 + x9;
  int32_t x79 = x12 * x5;
  bool x80 = x79 < x3;
  //#Scan Variants
  // generated code for Scan Variants
  int32_t x1 = 0;
  printf("%s\n","Was parallel in run loop");
  pthread_t threads[(int)x5];
  int *inputArray;
  inputArray=(int*)malloc(x5*sizeof(int));
  void* parallelPrefixSum(void* input){
    int x7=*(int*)input;
    int32_t x13 = x12 * x7;
    int32_t x14 = x11 + x13;
    int32_t x24 = 3 + x7;
    //#parallel prefix sum
    // generated code for parallel prefix sum
    int32_t x8 = 0;
    for(int x16=0; x16 < x12; x16++) {
      int32_t x17 = x14 + x16;
      float x18 = x0[x17];
      bool x19 = x18 >= x2;
      x8 += x19;
    }
    int32_t x25 = x8;
    x0[x24] = x25;
    //#parallel prefix sum
  }
  for(int x7=0; x7 < x5; x7++) {
	inputArray[x7]=x7;
	pthread_create(&threads[x7], NULL, parallelPrefixSum, (void *)&inputArray[x7]);
  }
  for(int x7=0; x7 < x5; x7++) {
	pthread_join(threads[x7], NULL);
  }
  if (x31) {
    int32_t x32 = 3 + x5;
    x0[x32] = 0;
    for(int x35=1; x35 < x5; x35++) {
      int32_t x36 = x32 + x35;
      int32_t x37 = 3 + x35;
      int32_t x38 = x37 - 1;
      float x39 = x0[x38];
      int32_t x40 = x36 - 1;
      float x41 = x0[x40];
      float x42 = x39 + x41;
      x0[x36] = x42;
    }
    int32_t x46 = x32 - 1;
    float x47 = x0[x46];
    int32_t x48 = x46 + x5;
    float x49 = x0[x48];
    float x50 = x47 + x49;
    x1 = x50;
  } else {
  }
  void* parallelChunk(void* input){
    int x54=*(int*)input;
    int32_t x60 = 3 + x54;
    int32_t x61 = x60 + x5;
    float x62 = x0[x61];
    int32_t x65 = x62 + x64;
    int32_t x57 = x12 * x54;
    //#parallel chunk
    // generated code for parallel chunk
    int32_t x55 = 0;
    for(int x56=0; x56 < x12; x56++) {
      int32_t x66 = x55;
      int32_t x67 = x65 + x66;
      int32_t x58 = x56 + x57;
      int32_t x59 = x11 + x58;
      int32_t x68 = x59 + x10;
      x0[x67] = x68;
      float x70 = x0[x59];
      bool x71 = x70 >= x2;
      x55 += x71;
    }
    //#parallel chunk
  }
  for(int x54=0; x54 < x5; x54++) {
  	pthread_create(&threads[x54], NULL, parallelChunk, (void *)&inputArray[x54]);
  }
  for(int x54=0; x54 < x5; x54++) {
	pthread_join(threads[x54], NULL);
  }
  if (x80) {
    for(int x82=x79; x82 < x3; x82++) {
      int32_t x83 = x82 - x10;
      float x87 = x0[x83];
      bool x88 = x87 >= x2;
      //#run instruction without branching
      // generated code for run instruction without branching
      int32_t x84 = x1;
      int32_t x85 = x84 + x64;
      x0[x85] = x82;
      x1 += x88;
      //#run instruction without branching
    }
  } else {
  }
  int32_t x96 = x1;
  printf("%s\n","Number of tuples found: ");
  printf("%d\n",x96);
  bool x100 = x96 == 0;
  if (x100) {
  } else {
    printf("%s\n","Output array: ");
    for(int x103=0; x103 < x96; x103++) {
      int32_t x104 = x103 + x64;
      float x105 = x0[x104];
      printf("%f\n",x105);
    }
  }
  //#Scan Variants
}
/*****************************************
End of C Generated Code
*******************************************/
