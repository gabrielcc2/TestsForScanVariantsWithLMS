#include <fcntl.h>
#include <errno.h>
#include <err.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <stdlib.h>
#include <emmintrin.h>
#include <mmintrin.h>
void Scan(float*);
int main(int argc, char *argv[])
{
  if (argc < 4) {
    printf("Missing arguments. Usage: filename numberOfTuples compareValue\n");
    return 0;
  }
  FILE *ptr_file;
  char buf[1000];
  int numTuples=atoi(argv[2]);
  float compareValue=atof(argv[3]);
  int numReadTuples=0;
  ptr_file =fopen(argv[1],"r");
  if (!ptr_file){
    printf("Error. Could not open the input file.\n");
    return 0;
  }
  if (numTuples<=0){
    printf("Error. Please pass a valid number of tuples.\n");
    return 0;
  }
  float *array;
  array=(float*)malloc(((2*numTuples)+3)*sizeof(float));
  array[0]=compareValue;
  array[1]=(float)numTuples;
  array[2]=(float)0; //Unused
  while (fgets(buf,1000, ptr_file)!=NULL && numReadTuples<numTuples){
    array[numReadTuples+3]=atof(buf);
    numReadTuples++;
  }
  fclose(ptr_file);
  if (numReadTuples<numTuples){
    printf("Error, file contains less tuples than specified.\n");
    return 0;
  }
  Scan(array);
  return 1;
}
/*****************************************
Emitting C Generated Code
*******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
void Scan(float*  x0) {
  float x3 = x0[0];
  float x4 = x0[1];
  int32_t x42 = 3 + x4;
  //#Scan Variants
  // generated code for Scan Variants
  int32_t x1 = 0;
  int32_t x2 = 1;
  int32_t x5 = sizeof(float);
  int32_t x6 = sizeof(__m128);
  __m128* x8 = (__m128*) &(x0[3]);
  int32_t x9 = (intptr_t)(x8);
  int32_t x10 = x9 % x6;
  int32_t x11 = x6 - x10;
  char* tmp_array= (char*) x8;
  tmp_array+=x11;
  x8=(__m128*)(tmp_array);
  bool x17 = x11 == 0;
  int32_t x12 = x11 / x5;
  if (x17) {
  } else {
    for(int x19=0; x19 < x12; x19++) {
      int32_t x20 = x19 + 3;
      float x21 = x0[x20];
      bool x22 = x21 >= x3;
      //#decorated instruction
      // generated code for decorated instruction
      //#run instruction with branching
      // generated code for run instruction with branching
      if (x22) {
        int32_t x23 = x1;
        int32_t x24 = x23 + 3;
        int32_t x25 = x24 + x4;
        x0[x25] = x19;
        x1 += 1;
      } else {
      }
      //#run instruction with branching
      //#decorated instruction
    }
  }
  int32_t x38 = x12;
  __m128 x39 = _mm_set1_ps(x3);
  __m128 x40 = _mm_set1_ps(0);
  __m128 x41 = _mm_set1_ps(0);
  int32_t x13 = x4 - x12;
  int32_t x14 = x13 * x5;
  int32_t x15 = x14 / x6;
  for(int x44=0; x44 < x15; x44++) {
    float* x46 = (float*) &(x8[x44]);
    __m128 x47 = _mm_load_ps(x46);
    __m128 x48 = _mm_cmpge_ps(x47,x39);
    int32_t x49 = _mm_movemask_ps((__m128)x48);
    int32_t x50 = (x49 & 1);
    if (x50) {
      int32_t x51 = x1;
      int32_t x53 = x38;
      int32_t x52 = x51 + x42;
      x0[x52] = x53;
      x1 += 1;
    } else {
    }
    x38 += 1;
    int32_t x59 = (x49 >> 1);
    int32_t x60 = (x59 & 1);
    if (x60) {
      int32_t x61 = x1;
      int32_t x63 = x38;
      int32_t x62 = x61 + x42;
      x0[x62] = x63;
      x1 += 1;
    } else {
    }
    x38 += 1;
    int32_t x69 = (x49 >> 2);
    int32_t x70 = (x69 & 1);
    if (x70) {
      int32_t x71 = x1;
      int32_t x73 = x38;
      int32_t x72 = x71 + x42;
      x0[x72] = x73;
      x1 += 1;
    } else {
    }
    x38 += 1;
    int32_t x79 = (x49 >> 3);
    int32_t x80 = (x79 & 1);
    if (x80) {
      int32_t x81 = x1;
      int32_t x83 = x38;
      int32_t x82 = x81 + x42;
      x0[x82] = x83;
      x1 += 1;
    } else {
    }
    x38 += 1;
  }
  int32_t x91 = x15 * x6;
  int32_t x92 = x91 / x5;
  int32_t x93 = x92 + x12;
  for(int x95=x93; x95 < x4; x95++) {
    int32_t x96 = x95 + 3;
    float x97 = x0[x96];
    bool x98 = x97 >= x3;
    //#decorated instruction
    // generated code for decorated instruction
    //#run instruction with branching
    // generated code for run instruction with branching
    if (x98) {
      int32_t x99 = x1;
      int32_t x100 = x99 + 3;
      int32_t x101 = x100 + x4;
      x0[x101] = x95;
      x1 += 1;
    } else {
    }
    //#run instruction with branching
    //#decorated instruction
  }
  int32_t x112 = x1;
  printf("%s\n","Number of tuples found: ");
  printf("%d\n",x112);
  bool x116 = x112 == 0;
  if (x116) {
  } else {
    printf("%s\n","Output array: ");
    for(int x119=0; x119 < x112; x119++) {
      int32_t x120 = x119 + x42;
      float x121 = x0[x120];
      printf("%f\n",x121);
    }
  }
  //#Scan Variants
}
/*****************************************
End of C Generated Code
*******************************************/
